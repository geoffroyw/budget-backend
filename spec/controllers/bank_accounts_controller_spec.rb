require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BankAccountsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # BankAccount. As you add validations to BankAccount, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:name => 'Name', :currency_code => 'EUR'}
  }

  let(:invalid_attributes) {
    {:name => '', :currency_code => ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BankAccountsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all bank_accounts as @bank_accounts' do
      bank_account = BankAccount.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:bank_accounts)).to eq([bank_account])
    end
  end

  describe 'GET show' do
    it 'assigns the requested bank_account as @bank_account' do
      bank_account = BankAccount.create! valid_attributes
      get :show, params: {:id => bank_account.to_param}, session: valid_session
      expect(assigns(:bank_account)).to eq(bank_account)
    end
  end


  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new BankAccount' do
        expect {
          post :create, params: {:data => {:attributes => valid_attributes}}, session: valid_session
        }.to change(BankAccount, :count).by(1)
      end

      it 'assigns a newly created bank_account as @bank_account' do
        post :create, params: {:data => {:attributes => valid_attributes}}, session: valid_session
        expect(assigns(:bank_account)).to be_a(BankAccount)
        expect(assigns(:bank_account)).to be_persisted
      end

      it 'responds with http status 201' do
        post :create, params: {:data => {:attributes => valid_attributes}}, session: valid_session
        expect(response).to have_http_status(201)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved bank_account as @bank_account' do
        post :create, params: {:data => {:attributes => invalid_attributes}}, session: valid_session
        expect(assigns(:bank_account)).to be_a_new(BankAccount)
      end

      it 'responds with http status 422' do
        post :create, params: {:data => {:attributes => invalid_attributes}}, session: valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_attributes) {
        {:name => 'New name'}
      }

      it 'updates the requested bank_account' do
        bank_account = BankAccount.create! valid_attributes
        put :update, params: {:id => bank_account.to_param, :data => {:attributes => new_attributes}}, session: valid_session
        bank_account.reload
        expect(bank_account.name).to eq('New name')
      end

      it 'assigns the requested bank_account as @bank_account' do
        bank_account = BankAccount.create! valid_attributes
        put :update, params: {:id => bank_account.to_param, :data => {:attributes => valid_attributes}}, session: valid_session
        expect(assigns(:bank_account)).to eq(bank_account)
      end

      it 'responds with status 200' do
        bank_account = BankAccount.create! valid_attributes
        put :update, params: {:id => bank_account.to_param, :data => {:attributes => valid_attributes}}, session: valid_session
        expect(response).to have_http_status(200)
      end
    end

    describe 'with invalid params' do
      it 'assigns the bank_account as @bank_account' do
        bank_account = BankAccount.create! valid_attributes
        put :update, params: {:id => bank_account.to_param, :data => {:attributes => invalid_attributes}}, session: valid_session
        expect(assigns(:bank_account)).to eq(bank_account)
      end

      it 'responds with status code 422' do
        bank_account = BankAccount.create! valid_attributes
        put :update, params: {:id => bank_account.to_param, :data => {:attributes => invalid_attributes}}, session: valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested bank_account' do
      bank_account = BankAccount.create! valid_attributes
      expect {
        delete :destroy, params: {:id => bank_account.to_param}, session: valid_session
      }.to change(BankAccount, :count).by(-1)
    end

    it 'redirects to the bank_accounts list' do
      bank_account = BankAccount.create! valid_attributes
      delete :destroy, params: {:id => bank_account.to_param}, session: valid_session
      expect(response).to have_http_status(204)
    end
  end

end
